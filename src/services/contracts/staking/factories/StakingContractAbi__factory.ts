/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type {
  Provider,
  Account,
  AbstractAddress,
  BytesLike,
  DeployContractOptions,
  StorageSlot,
  DeployContractResult,
  JsonAbi,
} from "fuels";
import type {
  StakingContractAbi,
  StakingContractAbiInterface,
} from "../StakingContractAbi";

export const _abi = {
  encoding: "1",
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 13,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum AccessError",
      components: [
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 12,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum InitializationError",
      components: [
        {
          name: "CannotReinitialized",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: [9],
    },
    {
      typeId: 7,
      type: "enum StakingError",
      components: [
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidStartTime",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidEndTime",
          type: 0,
          typeArguments: null,
        },
        {
          name: "TrackIsDisabled",
          type: 0,
          typeArguments: null,
        },
        {
          name: "StakingPeriodNotStarted",
          type: 0,
          typeArguments: null,
        },
        {
          name: "StakingPeriodEnded",
          type: 0,
          typeArguments: null,
        },
        {
          name: "TrackIdDoesNotExist",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidAssetId",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "MaxStakeReached",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AlreadyInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "UserHasNotStaked",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "enum State",
      components: [
        {
          name: "Uninitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Initialized",
          type: 4,
          typeArguments: null,
        },
        {
          name: "Revoked",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "raw untyped ptr",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "struct AddTrack",
      components: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "track_name",
          type: 22,
          typeArguments: null,
        },
        {
          name: "track_config",
          type: 23,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "struct Address",
      components: [
        {
          name: "bits",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "struct AssetId",
      components: [
        {
          name: "bits",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct Bytes",
      components: [
        {
          name: "buf",
          type: 19,
          typeArguments: null,
        },
        {
          name: "len",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct ContractId",
      components: [
        {
          name: "bits",
          type: 2,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct DisableTrack",
      components: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "struct RawBytes",
      components: [
        {
          name: "ptr",
          type: 10,
          typeArguments: null,
        },
        {
          name: "cap",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 20,
      type: "struct Stake",
      components: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "user",
          type: 4,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 21,
      type: "struct StakeData",
      components: [
        {
          name: "moment",
          type: 27,
          typeArguments: null,
        },
        {
          name: "staked",
          type: 27,
          typeArguments: null,
        },
        {
          name: "stake_weight",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 22,
      type: "struct String",
      components: [
        {
          name: "bytes",
          type: 14,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 23,
      type: "struct TrackConfig",
      components: [
        {
          name: "stake_token",
          type: 13,
          typeArguments: null,
        },
        {
          name: "max_total_stake",
          type: 27,
          typeArguments: null,
        },
        {
          name: "start",
          type: 27,
          typeArguments: null,
        },
        {
          name: "end",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 24,
      type: "struct TrackInfo",
      components: [
        {
          name: "track_name",
          type: 22,
          typeArguments: null,
        },
        {
          name: "track_config",
          type: 23,
          typeArguments: null,
        },
        {
          name: "track_stake_data",
          type: 21,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 25,
      type: "struct Unstake",
      components: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "user",
          type: 4,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 27,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 26,
      type: "u256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 27,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 8,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "name",
          type: 22,
          typeArguments: null,
        },
        {
          name: "stake_token",
          type: 13,
          typeArguments: null,
        },
        {
          name: "max_total_stake",
          type: 27,
          typeArguments: null,
        },
        {
          name: "start",
          type: 27,
          typeArguments: null,
        },
        {
          name: "end",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "add_track",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      name: "constructor",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "disable_track",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "stake",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 4,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "unstake",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_time_mock",
      output: {
        name: "",
        type: 6,
        typeArguments: [
          {
            name: "",
            type: 15,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "get_total_stake",
      output: {
        name: "",
        type: 6,
        typeArguments: [
          {
            name: "",
            type: 1,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "get_total_stake_weight",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
      ],
      name: "get_track_info",
      output: {
        name: "",
        type: 6,
        typeArguments: [
          {
            name: "",
            type: 24,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "user",
          type: 4,
          typeArguments: null,
        },
      ],
      name: "get_user_stake",
      output: {
        name: "",
        type: 6,
        typeArguments: [
          {
            name: "",
            type: 1,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "track_id",
          type: 27,
          typeArguments: null,
        },
        {
          name: "user",
          type: 4,
          typeArguments: null,
        },
      ],
      name: "get_user_stake_weight",
      output: {
        name: "",
        type: 26,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "track_count",
      output: {
        name: "",
        type: 27,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "9205315699162049434",
      loggedType: {
        name: "",
        type: 7,
        typeArguments: [],
      },
    },
    {
      logId: "4571204900286667806",
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: "10577264726045696069",
      loggedType: {
        name: "",
        type: 11,
        typeArguments: [],
      },
    },
    {
      logId: "2161305517876418151",
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: "16280289466020123285",
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: "3704763681260838201",
      loggedType: {
        name: "",
        type: 16,
        typeArguments: [],
      },
    },
    {
      logId: "5446738920950914856",
      loggedType: {
        name: "",
        type: 20,
        typeArguments: [],
      },
    },
    {
      logId: "12970362301975156672",
      loggedType: {
        name: "",
        type: 18,
        typeArguments: [],
      },
    },
    {
      logId: "10261461323738903350",
      loggedType: {
        name: "",
        type: 25,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [
  {
    key: "a43e31b3490a045948b6e545cb6950133c7d4908b1a353b4fe6660281cd5f6cd",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "a43e31b3490a045948b6e545cb6950133c7d4908b1a353b4fe6660281cd5f6ce",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "c37e7f1fcdf92d74f333cdd74d6e257c24ede6d62cc0ebc871184af0743621cd",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
];

export const StakingContractAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): StakingContractAbiInterface {
    return new Interface(
      _abi as unknown as JsonAbi,
    ) as StakingContractAbiInterface;
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): StakingContractAbi {
    return new Contract(
      id,
      _abi as unknown as JsonAbi,
      accountOrProvider,
    ) as unknown as StakingContractAbi;
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<DeployContractResult<StakingContractAbi>> {
    const factory = new ContractFactory(
      bytecode,
      _abi as unknown as JsonAbi,
      wallet,
    );

    return factory.deploy<StakingContractAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
};

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from "fuels";

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput {
  NotOwner = "NotOwner",
}
export enum AccessErrorOutput {
  NotOwner = "NotOwner",
}
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum InitializationErrorInput {
  CannotReinitialized = "CannotReinitialized",
}
export enum InitializationErrorOutput {
  CannotReinitialized = "CannotReinitialized",
}
export enum ProofErrorInput {
  InvalidKey = "InvalidKey",
  InvalidProofLength = "InvalidProofLength",
}
export enum ProofErrorOutput {
  InvalidKey = "InvalidKey",
  InvalidProofLength = "InvalidProofLength",
}
export enum SaleErrorInput {
  InvalidTimeInterval = "InvalidTimeInterval",
  CurrentTimeLower = "CurrentTimeLower",
  InvalidPrice = "InvalidPrice",
  InvalidSoldAmount = "InvalidSoldAmount",
  PurchaseOverRemaining = "PurchaseOverRemaining",
  WrongAsset = "WrongAsset",
  SaleNotActive = "SaleNotActive",
  NotFinished = "NotFinished",
  NotEnoughBalance = "NotEnoughBalance",
  NotInitialized = "NotInitialized",
  PaymentZero = "PaymentZero",
  Unauthorized = "Unauthorized",
  NotOwnerOrOperator = "NotOwnerOrOperator",
}
export enum SaleErrorOutput {
  InvalidTimeInterval = "InvalidTimeInterval",
  CurrentTimeLower = "CurrentTimeLower",
  InvalidPrice = "InvalidPrice",
  InvalidSoldAmount = "InvalidSoldAmount",
  PurchaseOverRemaining = "PurchaseOverRemaining",
  WrongAsset = "WrongAsset",
  SaleNotActive = "SaleNotActive",
  NotFinished = "NotFinished",
  NotEnoughBalance = "NotEnoughBalance",
  NotInitialized = "NotInitialized",
  PaymentZero = "PaymentZero",
  Unauthorized = "Unauthorized",
  NotOwnerOrOperator = "NotOwnerOrOperator",
}
export type StateInput = Enum<{
  Uninitialized: [];
  Initialized: IdentityInput;
  Revoked: [];
}>;
export type StateOutput = Enum<{
  Uninitialized: [];
  Initialized: IdentityOutput;
  Revoked: [];
}>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type CampaignInitParamsInput = {
  time: TimeInput;
  whitelist: Option<WhitelistParamsInput>;
  payment_token: AssetIdInput;
  sale_price: BigNumberish;
};
export type CampaignInitParamsOutput = {
  time: TimeOutput;
  whitelist: Option<WhitelistParamsOutput>;
  payment_token: AssetIdOutput;
  sale_price: BN;
};
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type OwnershipTransferredInput = {
  new_owner: IdentityInput;
  previous_owner: IdentityInput;
};
export type OwnershipTransferredOutput = {
  new_owner: IdentityOutput;
  previous_owner: IdentityOutput;
};
export type PurchasedWhitelistInput = {
  leaf: [IdentityInput, BigNumberish];
  amount_paid: BigNumberish;
  key: BigNumberish;
  proof: Vec<string>;
};
export type PurchasedWhitelistOutput = {
  leaf: [IdentityOutput, BN];
  amount_paid: BN;
  key: BN;
  proof: Vec<string>;
};
export type SaleInfoInput = {
  payment_token: AssetIdInput;
  sale_price: BigNumberish;
  sold_amount: BigNumberish;
};
export type SaleInfoOutput = {
  payment_token: AssetIdOutput;
  sale_price: BN;
  sold_amount: BN;
};
export type SaleInitializedInput = { campaign: CampaignInitParamsInput };
export type SaleInitializedOutput = { campaign: CampaignInitParamsOutput };
export type TimeInput = { start: BigNumberish; end: BigNumberish };
export type TimeOutput = { start: BN; end: BN };
export type WhitelistParamsInput = {
  merkle_root: string;
  num_leaves: BigNumberish;
};
export type WhitelistParamsOutput = { merkle_root: string; num_leaves: BN };
export type WhitelistUpdatedInput = { whitelist: WhitelistParamsInput };
export type WhitelistUpdatedOutput = { whitelist: WhitelistParamsOutput };
export type WithdrewInput = { amount: BigNumberish; currency: AssetIdInput };
export type WithdrewOutput = { amount: BN; currency: AssetIdOutput };

export interface SaleContractAbiInterface extends Interface {
  functions: {
    owner: FunctionFragment;
    constructor: FunctionFragment;
    remove_whitelist: FunctionFragment;
    set_operators: FunctionFragment;
    transfer_ownership: FunctionFragment;
    update_whitelist: FunctionFragment;
    whitelisted_purchase: FunctionFragment;
    withdraw: FunctionFragment;
    get_number_of_participants: FunctionFragment;
    get_paid: FunctionFragment;
    get_participants: FunctionFragment;
    get_sale_info: FunctionFragment;
    get_sold_amount: FunctionFragment;
    get_time_info: FunctionFragment;
    get_whitelist: FunctionFragment;
    is_operator: FunctionFragment;
    is_whitelisted: FunctionFragment;
  };
}

export class SaleContractAbi extends Contract {
  interface: SaleContractAbiInterface;
  functions: {
    owner: InvokeFunction<[], StateOutput>;
    constructor: InvokeFunction<
      [owner: IdentityInput, campaign: CampaignInitParamsInput],
      void
    >;
    remove_whitelist: InvokeFunction<[], void>;
    set_operators: InvokeFunction<
      [operators: Vec<[IdentityInput, boolean]>],
      void
    >;
    transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
    update_whitelist: InvokeFunction<[whitelist: WhitelistParamsInput], void>;
    whitelisted_purchase: InvokeFunction<
      [max_payment: BigNumberish, key: BigNumberish, proof: Vec<string>],
      void
    >;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
    get_number_of_participants: InvokeFunction<[], BN>;
    get_paid: InvokeFunction<[user: IdentityInput], Option<BN>>;
    get_participants: InvokeFunction<
      [_start: BigNumberish, end: BigNumberish],
      Vec<IdentityOutput>
    >;
    get_sale_info: InvokeFunction<[], Option<SaleInfoOutput>>;
    get_sold_amount: InvokeFunction<[], BN>;
    get_time_info: InvokeFunction<[], Option<TimeOutput>>;
    get_whitelist: InvokeFunction<[], Option<WhitelistParamsOutput>>;
    is_operator: InvokeFunction<[user: IdentityInput], boolean>;
    is_whitelisted: InvokeFunction<
      [
        user: IdentityInput,
        max_payment: BigNumberish,
        key: BigNumberish,
        proof: Vec<string>,
      ],
      boolean
    >;
  };
}

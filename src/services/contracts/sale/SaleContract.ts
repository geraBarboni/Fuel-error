/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import type {
  AbstractAddress,
  Account,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
  JsonAbi,
  Provider,
  StorageSlot,
} from "fuels";
import { Contract, Interface } from "fuels";

import type { Enum, Option, Vec } from "./common";

export enum AccessErrorInput {
  NotOwner = "NotOwner",
}
export enum AccessErrorOutput {
  NotOwner = "NotOwner",
}
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum InitializationErrorInput {
  CannotReinitialized = "CannotReinitialized",
}
export enum InitializationErrorOutput {
  CannotReinitialized = "CannotReinitialized",
}
export enum ProofErrorInput {
  InvalidKey = "InvalidKey",
  InvalidProofLength = "InvalidProofLength",
}
export enum ProofErrorOutput {
  InvalidKey = "InvalidKey",
  InvalidProofLength = "InvalidProofLength",
}
export enum SaleErrorInput {
  InvalidTimeInterval = "InvalidTimeInterval",
  CurrentTimeLower = "CurrentTimeLower",
  InvalidPrice = "InvalidPrice",
  InvalidSoldAmount = "InvalidSoldAmount",
  PurchaseOverRemaining = "PurchaseOverRemaining",
  WrongAsset = "WrongAsset",
  SaleNotActive = "SaleNotActive",
  NotFinished = "NotFinished",
  NotEnoughBalance = "NotEnoughBalance",
  NotInitialized = "NotInitialized",
  PaymentZero = "PaymentZero",
  Unauthorized = "Unauthorized",
  NotOwnerOrOperator = "NotOwnerOrOperator",
}
export enum SaleErrorOutput {
  InvalidTimeInterval = "InvalidTimeInterval",
  CurrentTimeLower = "CurrentTimeLower",
  InvalidPrice = "InvalidPrice",
  InvalidSoldAmount = "InvalidSoldAmount",
  PurchaseOverRemaining = "PurchaseOverRemaining",
  WrongAsset = "WrongAsset",
  SaleNotActive = "SaleNotActive",
  NotFinished = "NotFinished",
  NotEnoughBalance = "NotEnoughBalance",
  NotInitialized = "NotInitialized",
  PaymentZero = "PaymentZero",
  Unauthorized = "Unauthorized",
  NotOwnerOrOperator = "NotOwnerOrOperator",
}
export type StateInput = Enum<{
  Uninitialized: [];
  Initialized: IdentityInput;
  Revoked: [];
}>;
export type StateOutput = Enum<{
  Uninitialized: [];
  Initialized: IdentityOutput;
  Revoked: [];
}>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type CampaignInitParamsInput = {
  time: TimeInput;
  whitelist: Option<WhitelistParamsInput>;
  payment_token: AssetIdInput;
  sale_price: BigNumberish;
};
export type CampaignInitParamsOutput = {
  time: TimeOutput;
  whitelist: Option<WhitelistParamsOutput>;
  payment_token: AssetIdOutput;
  sale_price: BN;
};
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipSetInput = { new_owner: IdentityInput };
export type OwnershipSetOutput = { new_owner: IdentityOutput };
export type OwnershipTransferredInput = {
  new_owner: IdentityInput;
  previous_owner: IdentityInput;
};
export type OwnershipTransferredOutput = {
  new_owner: IdentityOutput;
  previous_owner: IdentityOutput;
};
export type PurchasedWhitelistInput = {
  leaf: [IdentityInput, BigNumberish];
  amount_paid: BigNumberish;
  key: BigNumberish;
  proof: Vec<string>;
};
export type PurchasedWhitelistOutput = {
  leaf: [IdentityOutput, BN];
  amount_paid: BN;
  key: BN;
  proof: Vec<string>;
};
export type SaleInfoInput = {
  payment_token: AssetIdInput;
  sale_price: BigNumberish;
  sold_amount: BigNumberish;
};
export type SaleInfoOutput = {
  payment_token: AssetIdOutput;
  sale_price: BN;
  sold_amount: BN;
};
export type SaleInitializedInput = { campaign: CampaignInitParamsInput };
export type SaleInitializedOutput = { campaign: CampaignInitParamsOutput };
export type TimeInput = { start: BigNumberish; end: BigNumberish };
export type TimeOutput = { start: BN; end: BN };
export type WhitelistParamsInput = {
  merkle_root: string;
  num_leaves: BigNumberish;
};
export type WhitelistParamsOutput = { merkle_root: string; num_leaves: BN };
export type WhitelistUpdatedInput = { whitelist: WhitelistParamsInput };
export type WhitelistUpdatedOutput = { whitelist: WhitelistParamsOutput };
export type WithdrewInput = { amount: BigNumberish; currency: AssetIdInput };
export type WithdrewOutput = { amount: BN; currency: AssetIdOutput };

const abi = {
  encoding: "1",
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 6,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 6,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum AccessError",
      components: [
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 14,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 17,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "enum InitializationError",
      components: [
        {
          name: "CannotReinitialized",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 9,
      type: "enum ProofError",
      components: [
        {
          name: "InvalidKey",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidProofLength",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "enum SaleError",
      components: [
        {
          name: "InvalidTimeInterval",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CurrentTimeLower",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidPrice",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidSoldAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "PurchaseOverRemaining",
          type: 0,
          typeArguments: null,
        },
        {
          name: "WrongAsset",
          type: 0,
          typeArguments: null,
        },
        {
          name: "SaleNotActive",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotFinished",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotEnoughBalance",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "PaymentZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Unauthorized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwnerOrOperator",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "enum State",
      components: [
        {
          name: "Uninitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Initialized",
          type: 6,
          typeArguments: null,
        },
        {
          name: "Revoked",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "raw untyped ptr",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct Address",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct AssetId",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct CampaignInitParams",
      components: [
        {
          name: "time",
          type: 24,
          typeArguments: null,
        },
        {
          name: "whitelist",
          type: 8,
          typeArguments: [
            {
              name: "",
              type: 26,
              typeArguments: null,
            },
          ],
        },
        {
          name: "payment_token",
          type: 15,
          typeArguments: null,
        },
        {
          name: "sale_price",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct ContractId",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 20,
      type: "struct PurchasedWhitelist",
      components: [
        {
          name: "leaf",
          type: 2,
          typeArguments: null,
        },
        {
          name: "amount_paid",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 21,
      type: "struct RawVec",
      components: [
        {
          name: "ptr",
          type: 13,
          typeArguments: null,
        },
        {
          name: "cap",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 22,
      type: "struct SaleInfo",
      components: [
        {
          name: "payment_token",
          type: 15,
          typeArguments: null,
        },
        {
          name: "sale_price",
          type: 29,
          typeArguments: null,
        },
        {
          name: "sold_amount",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 23,
      type: "struct SaleInitialized",
      components: [
        {
          name: "campaign",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 24,
      type: "struct Time",
      components: [
        {
          name: "start",
          type: 30,
          typeArguments: null,
        },
        {
          name: "end",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 25,
      type: "struct Vec",
      components: [
        {
          name: "buf",
          type: 21,
          typeArguments: [
            {
              name: "",
              type: 12,
              typeArguments: null,
            },
          ],
        },
        {
          name: "len",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 26,
      type: "struct WhitelistParams",
      components: [
        {
          name: "merkle_root",
          type: 3,
          typeArguments: null,
        },
        {
          name: "num_leaves",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 27,
      type: "struct WhitelistUpdated",
      components: [
        {
          name: "whitelist",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 28,
      type: "struct Withdrew",
      components: [
        {
          name: "amount",
          type: 30,
          typeArguments: null,
        },
        {
          name: "currency",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 29,
      type: "u256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 30,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 11,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "owner",
          type: 6,
          typeArguments: null,
        },
        {
          name: "campaign",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "constructor",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "remove_whitelist",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "operators",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 1,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "set_operators",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "whitelist",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "update_whitelist",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "max_payment",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "whitelisted_purchase",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "amount",
          type: 30,
          typeArguments: null,
        },
      ],
      name: "withdraw",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_number_of_participants",
      output: {
        name: "",
        type: 30,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "get_paid",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 29,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "_start",
          type: 30,
          typeArguments: null,
        },
        {
          name: "end",
          type: 30,
          typeArguments: null,
        },
      ],
      name: "get_participants",
      output: {
        name: "",
        type: 25,
        typeArguments: [
          {
            name: "",
            type: 6,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_sale_info",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 22,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_sold_amount",
      output: {
        name: "",
        type: 29,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_time_info",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 24,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_whitelist",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 26,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "is_operator",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
        {
          name: "max_payment",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "is_whitelisted",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "2161305517876418151",
      loggedType: {
        name: "",
        type: 7,
        typeArguments: [],
      },
    },
    {
      logId: "16280289466020123285",
      loggedType: {
        name: "",
        type: 18,
        typeArguments: [],
      },
    },
    {
      logId: "2382138590764925289",
      loggedType: {
        name: "",
        type: 10,
        typeArguments: [],
      },
    },
    {
      logId: "7723399263993889794",
      loggedType: {
        name: "",
        type: 23,
        typeArguments: [],
      },
    },
    {
      logId: "4571204900286667806",
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: "2755526942549060969",
      loggedType: {
        name: "",
        type: 27,
        typeArguments: [],
      },
    },
    {
      logId: "12970362301975156672",
      loggedType: {
        name: "",
        type: 19,
        typeArguments: [],
      },
    },
    {
      logId: "13375681076267723605",
      loggedType: {
        name: "",
        type: 9,
        typeArguments: [],
      },
    },
    {
      logId: "16280723578963467792",
      loggedType: {
        name: "",
        type: 20,
        typeArguments: [],
      },
    },
    {
      logId: "4557133438152357774",
      loggedType: {
        name: "",
        type: 28,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
  specVersion: "",
  encodingVersion: "1",
  programType: "",
  concreteTypes: [],
  metadataTypes: [],
};

const storageSlots: StorageSlot[] = [
  {
    key: "123d2cfe74b38d52f2f89efaaf580bbdf49eaf729b826293e457d705a937e828",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce4",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce5",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce6",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce7",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "96465364e0b710c44f3867607b7c23578bfe856e7c0ed0a7324b0fbc87fdd449",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "ef5b318d09f18624564f20a36c56fc6b553499683c90b8b131ffaf3e64611ccc",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "ef5b318d09f18624564f20a36c56fc6b553499683c90b8b131ffaf3e64611ccd",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
];

export class SaleContractInterface extends Interface {
  constructor() {
    super(abi as unknown as JsonAbi);
  }

  declare functions: {
    owner: FunctionFragment;
    constructor: FunctionFragment;
    remove_whitelist: FunctionFragment;
    set_operators: FunctionFragment;
    transfer_ownership: FunctionFragment;
    update_whitelist: FunctionFragment;
    whitelisted_purchase: FunctionFragment;
    withdraw: FunctionFragment;
    get_number_of_participants: FunctionFragment;
    get_paid: FunctionFragment;
    get_participants: FunctionFragment;
    get_sale_info: FunctionFragment;
    get_sold_amount: FunctionFragment;
    get_time_info: FunctionFragment;
    get_whitelist: FunctionFragment;
    is_operator: FunctionFragment;
    is_whitelisted: FunctionFragment;
  };
}

export class SaleContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: SaleContractInterface;
  declare functions: {
    owner: InvokeFunction<[], StateOutput>;
    constructor: InvokeFunction<
      [owner: IdentityInput, campaign: CampaignInitParamsInput],
      void
    >;
    remove_whitelist: InvokeFunction<[], void>;
    set_operators: InvokeFunction<
      [operators: Vec<[IdentityInput, boolean]>],
      void
    >;
    transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
    update_whitelist: InvokeFunction<[whitelist: WhitelistParamsInput], void>;
    whitelisted_purchase: InvokeFunction<
      [max_payment: BigNumberish, key: BigNumberish, proof: Vec<string>],
      void
    >;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
    get_number_of_participants: InvokeFunction<[], BN>;
    get_paid: InvokeFunction<[user: IdentityInput], Option<BN>>;
    get_participants: InvokeFunction<
      [_start: BigNumberish, end: BigNumberish],
      Vec<IdentityOutput>
    >;
    get_sale_info: InvokeFunction<[], Option<SaleInfoOutput>>;
    get_sold_amount: InvokeFunction<[], BN>;
    get_time_info: InvokeFunction<[], Option<TimeOutput>>;
    get_whitelist: InvokeFunction<[], Option<WhitelistParamsOutput>>;
    is_operator: InvokeFunction<[user: IdentityInput], boolean>;
    is_whitelisted: InvokeFunction<
      [
        user: IdentityInput,
        max_payment: BigNumberish,
        key: BigNumberish,
        proof: Vec<string>,
      ],
      boolean
    >;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi as unknown as JsonAbi, accountOrProvider);
  }
}

/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type {
  Provider,
  Account,
  AbstractAddress,
  BytesLike,
  DeployContractOptions,
  StorageSlot,
  DeployContractResult,
  JsonAbi,
} from "fuels";
import type {
  SaleContractAbi,
  SaleContractAbiInterface,
} from "../SaleContractAbi";

const _abi = {
  encoding: "1",
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 6,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "(_, _)",
      components: [
        {
          name: "__tuple_element",
          type: 6,
          typeArguments: null,
        },
        {
          name: "__tuple_element",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "enum AccessError",
      components: [
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 14,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 17,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "enum InitializationError",
      components: [
        {
          name: "CannotReinitialized",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 9,
      type: "enum ProofError",
      components: [
        {
          name: "InvalidKey",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidProofLength",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "enum SaleError",
      components: [
        {
          name: "InvalidTimeInterval",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CurrentTimeLower",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidPrice",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidSoldAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "PurchaseOverRemaining",
          type: 0,
          typeArguments: null,
        },
        {
          name: "WrongAsset",
          type: 0,
          typeArguments: null,
        },
        {
          name: "SaleNotActive",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotFinished",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotEnoughBalance",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "PaymentZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Unauthorized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwnerOrOperator",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "enum State",
      components: [
        {
          name: "Uninitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Initialized",
          type: 6,
          typeArguments: null,
        },
        {
          name: "Revoked",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "raw untyped ptr",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "struct Address",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct AssetId",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct CampaignInitParams",
      components: [
        {
          name: "time",
          type: 24,
          typeArguments: null,
        },
        {
          name: "whitelist",
          type: 8,
          typeArguments: [
            {
              name: "",
              type: 26,
              typeArguments: null,
            },
          ],
        },
        {
          name: "payment_token",
          type: 15,
          typeArguments: null,
        },
        {
          name: "sale_price",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct ContractId",
      components: [
        {
          name: "bits",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 20,
      type: "struct PurchasedWhitelist",
      components: [
        {
          name: "leaf",
          type: 2,
          typeArguments: null,
        },
        {
          name: "amount_paid",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 21,
      type: "struct RawVec",
      components: [
        {
          name: "ptr",
          type: 13,
          typeArguments: null,
        },
        {
          name: "cap",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 22,
      type: "struct SaleInfo",
      components: [
        {
          name: "payment_token",
          type: 15,
          typeArguments: null,
        },
        {
          name: "sale_price",
          type: 29,
          typeArguments: null,
        },
        {
          name: "sold_amount",
          type: 29,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 23,
      type: "struct SaleInitialized",
      components: [
        {
          name: "campaign",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 24,
      type: "struct Time",
      components: [
        {
          name: "start",
          type: 30,
          typeArguments: null,
        },
        {
          name: "end",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 25,
      type: "struct Vec",
      components: [
        {
          name: "buf",
          type: 21,
          typeArguments: [
            {
              name: "",
              type: 12,
              typeArguments: null,
            },
          ],
        },
        {
          name: "len",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: [12],
    },
    {
      typeId: 26,
      type: "struct WhitelistParams",
      components: [
        {
          name: "merkle_root",
          type: 3,
          typeArguments: null,
        },
        {
          name: "num_leaves",
          type: 30,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 27,
      type: "struct WhitelistUpdated",
      components: [
        {
          name: "whitelist",
          type: 26,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 28,
      type: "struct Withdrew",
      components: [
        {
          name: "amount",
          type: 30,
          typeArguments: null,
        },
        {
          name: "currency",
          type: 15,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 29,
      type: "u256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 30,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 11,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "owner",
          type: 6,
          typeArguments: null,
        },
        {
          name: "campaign",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "constructor",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "remove_whitelist",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "operators",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 1,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "set_operators",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "whitelist",
          type: 26,
          typeArguments: null,
        },
      ],
      name: "update_whitelist",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "max_payment",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "whitelisted_purchase",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "amount",
          type: 30,
          typeArguments: null,
        },
      ],
      name: "withdraw",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_number_of_participants",
      output: {
        name: "",
        type: 30,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "get_paid",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 29,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "_start",
          type: 30,
          typeArguments: null,
        },
        {
          name: "end",
          type: 30,
          typeArguments: null,
        },
      ],
      name: "get_participants",
      output: {
        name: "",
        type: 25,
        typeArguments: [
          {
            name: "",
            type: 6,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_sale_info",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 22,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_sold_amount",
      output: {
        name: "",
        type: 29,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_time_info",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 24,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_whitelist",
      output: {
        name: "",
        type: 8,
        typeArguments: [
          {
            name: "",
            type: 26,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "is_operator",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "user",
          type: 6,
          typeArguments: null,
        },
        {
          name: "max_payment",
          type: 29,
          typeArguments: null,
        },
        {
          name: "key",
          type: 30,
          typeArguments: null,
        },
        {
          name: "proof",
          type: 25,
          typeArguments: [
            {
              name: "",
              type: 3,
              typeArguments: null,
            },
          ],
        },
      ],
      name: "is_whitelisted",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: "2161305517876418151",
      loggedType: {
        name: "",
        type: 7,
        typeArguments: [],
      },
    },
    {
      logId: "16280289466020123285",
      loggedType: {
        name: "",
        type: 18,
        typeArguments: [],
      },
    },
    {
      logId: "2382138590764925289",
      loggedType: {
        name: "",
        type: 10,
        typeArguments: [],
      },
    },
    {
      logId: "7723399263993889794",
      loggedType: {
        name: "",
        type: 23,
        typeArguments: [],
      },
    },
    {
      logId: "4571204900286667806",
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: "2755526942549060969",
      loggedType: {
        name: "",
        type: 27,
        typeArguments: [],
      },
    },
    {
      logId: "12970362301975156672",
      loggedType: {
        name: "",
        type: 19,
        typeArguments: [],
      },
    },
    {
      logId: "13375681076267723605",
      loggedType: {
        name: "",
        type: 9,
        typeArguments: [],
      },
    },
    {
      logId: "16280723578963467792",
      loggedType: {
        name: "",
        type: 20,
        typeArguments: [],
      },
    },
    {
      logId: "4557133438152357774",
      loggedType: {
        name: "",
        type: 28,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [
  {
    key: "123d2cfe74b38d52f2f89efaaf580bbdf49eaf729b826293e457d705a937e828",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce4",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce5",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce6",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "79de8a9f2b7b219ae6b918b05d88cf978ea63fa0bede9e452494b501d19cdce7",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "96465364e0b710c44f3867607b7c23578bfe856e7c0ed0a7324b0fbc87fdd449",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "ef5b318d09f18624564f20a36c56fc6b553499683c90b8b131ffaf3e64611ccc",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
  {
    key: "ef5b318d09f18624564f20a36c56fc6b553499683c90b8b131ffaf3e64611ccd",
    value: "0000000000000000000000000000000000000000000000000000000000000000",
  },
];

export const SaleContractAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): SaleContractAbiInterface {
    return new Interface(
      _abi as unknown as JsonAbi,
    ) as SaleContractAbiInterface;
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): SaleContractAbi {
    return new Contract(
      id,
      _abi as unknown as JsonAbi,
      accountOrProvider,
    ) as unknown as SaleContractAbi;
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<DeployContractResult<SaleContractAbi>> {
    const factory = new ContractFactory(
      bytecode,
      _abi as unknown as JsonAbi,
      wallet,
    );

    return factory.deploy<SaleContractAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
};
